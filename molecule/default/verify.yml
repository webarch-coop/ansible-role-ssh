# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects OpenSSH Ansible role.
#
# The Webarchitects OpenSSH Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects OpenSSH Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects OpenSSH Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Verify as root
  become: true
  connection: local
  gather_facts: true
  hosts:
    - localhost
  tasks:

    - name: Run which ssh
      ansible.builtin.command: which ssh
      check_mode: false
      changed_when: false
      register: molecule_which_ssh

    - name: Debug which ssh
      ansible.builtin.debug:
        var: molecule_which_ssh.stdout

    - name: Check ssh -V
      ansible.builtin.command: ssh -V
      check_mode: false
      changed_when: false
      register: molecule_ssh_v

    - name: Debug ssh version
      ansible.builtin.debug:
        var: molecule_ssh_v.stderr

    - name: Check the runing services
      ansible.builtin.service_facts:
      register: molecule_service_facts

    - name: Debug ssh service status
      ansible.builtin.debug:
        msg: "{{ molecule_service_facts | community.general.json_query(molecule_service_jpq) }}"
        verbosity: 3
      vars:
        molecule_service_jpq: 'ansible_facts.services.["ssh.service"]|[0]'

    - name: Check that sshd is enabled and running
      ansible.builtin.assert:
        that:
          - (molecule_service_facts | community.general.json_query(molecule_service_jpq)).status == "enabled"
          - (molecule_service_facts | community.general.json_query(molecule_service_jpq)).state == "running"
        quiet: true
      vars:
        molecule_service_jpq: 'ansible_facts.services.["ssh.service"]|[0]'

    - name: Gather facts on listening ports
      community.general.listen_ports_facts:

    - name: Debug TCP ports
      ansible.builtin.debug:
        var: ansible_facts.tcp_listen
        verbosity: 2

    - name: Set a fact for the port that SSH is listening on
      ansible.builtin.set_fact:
        molecule_ssh_listening: "{{ ansible_facts.tcp_listen | community.general.json_query(molecule_ssh_listen_jpq) }}"
      vars:
        molecule_ssh_listen_jpq: "[?name=='sshd'].address"

    - name: Debug SSH listening ports
      ansible.builtin.debug:
        var: molecule_ssh_listening

    - name: Get a list of the ssh-audit server policies
      ansible.builtin.command: ssh-audit -nL
      check_mode: false
      changed_when: false
      register: molecule_ssh_audit_policy_list

    - name: Set a fact for the available server policies
      ansible.builtin.set_fact:
        molecule_ssh_audit_policies: "{{ molecule_ssh_audit_policy_list.stdout_lines | select('regex', '^.*[ ]Server.*$') | map('regex_replace', '^[ ][ ][*][ ].{1}') | map('regex_replace', '.{1}$') }}"

    - name: Debug available server policies
      ansible.builtin.debug:
        var: molecule_ssh_audit_policies
        verbosity: 2

    - name: Ubuntu SSH policy config
      block:

        - name: Debug SSH audit policy regex
          ansible.builtin.debug:
            var: molecule_ssh_audit_ubuntu_policy_regex
            verbosity: 2
          vars:
            molecule_ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_distribution_version }} LTS"

        - name: Set a fact for the SSH audit policy to use for Ubuntu
          ansible.builtin.set_fact:
            molecule_ssh_audit_policy: "{{ molecule_ssh_audit_policies | select('regex', molecule_ssh_audit_ubuntu_policy_regex) | community.general.json_query('[0]') }}"
          vars:
            molecule_ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_distribution_version }} LTS"
          when:
            - molecule_ssh_audit_policies | select('regex', molecule_ssh_audit_ubuntu_policy_regex) | type_debug == "list"
            - molecule_ssh_audit_policies | select('regex', molecule_ssh_audit_ubuntu_policy_regex) | type_debug != []
            - molecule_ssh_audit_policies | select('regex', molecule_ssh_audit_ubuntu_policy_regex) | community.general.json_query('[0]') | length > 0

       when: ansible_distribution == "Ubuntu"

    - name: OpenSSH policy audit config
      block:

        - name: Debug SSH audit policy regex
          ansible.builtin.debug:
            var: ssh_audit_openssh_policy_regex
            verbosity: 2
          vars:
            ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"

        - name: Set a fact for the SSH audit policy to use for OpenSSH
          ansible.builtin.set_fact:
            ssh_audit_policy: "{{ ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | community.general.json_query('[0]') }}"
          vars:
            ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"
          when:
            - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug == "list"
            - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug != []
            - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | community.general.json_query('[0]') | length > 0

       when: ansible_distribution != "Ubuntu"

    - name: SSH version audit
      ansible.builtin.command: "ssh-audit -njP {{ molecule_ssh_audit_policy | quote }} {{ ansible_default_ipv4.address }}"
      check_mode: false
      changed_when: false
      register: molecule_ssh_audit_policy_json
      failed_when: molecule_ssh_audit_policy_json.rc is not ansible.builtin.regex('^0|3$')

    - name: Set a fact for the results of the SSH policy audit
      ansible.builtin.set_fact:
        molecule_ssh_audit_policy_result: "{{ molecule_ssh_audit_policy_json.stdout_lines[0] | ansible.builtin.from_json }}"
      when: molecule_ssh_audit_policy_json.stdout_lines is defined

    - name: Debug the results of the SSH policy audit
      ansible.builtin.debug:
        var: molecule_ssh_audit_policy_result

...
