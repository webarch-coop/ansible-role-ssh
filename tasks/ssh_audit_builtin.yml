# Copyright 2019-2025 Chris Croome
#
# This file is part of the Webarchitects OpenSSH Ansible role.
#
# The Webarchitects OpenSSH Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects OpenSSH Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects OpenSSH Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: OpenSSH builtin policy audit
  block:

    - name: Get a list of the ssh-audit server policies
      ansible.builtin.command: ssh-audit -nL
      check_mode: false
      changed_when: false
      register: ssh_audit_policy_list

    - name: Set a fact for the available server policies
      ansible.builtin.set_fact:
        ssh_audit_policies: "{{ ssh_audit_policy_list.stdout_lines | select('regex', '^.*[ ]Server.*$') | map('regex_replace', '^[ ][ ][*][ ].{1}') | map('regex_replace', '.{1}$') }}"

    - name: Debug available server policies
      ansible.builtin.debug:
        var: ssh_audit_policies
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      when: ssh_audit_policies is defined

    - name: OpenSSH Ubuntu policy audit
      block:

        - name: Debug SSH audit policy regex
          ansible.builtin.debug:
            var: ssh_audit_ubuntu_policy_regex
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          vars:
            ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_facts.distribution_version }} LTS"

        - name: Set a fact for the SSH audit policy to use for Ubuntu
          ansible.builtin.set_fact:
            ssh_audit_policy: "{{ ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | community.general.json_query('[0]') }}"
          vars:
            ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_facts.distribution_version }} LTS"
          when:
            - ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | type_debug == "list"
            - ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | type_debug != []

      when:
        - ansible_facts.distribution == "Ubuntu"
        - ssh_audit_policies is defined
        - ssh_audit_policies != []

    - name: OpenSSH version policy audit
      block:

        - name: Debug SSH audit policy regex
          ansible.builtin.debug:
            var: ssh_audit_openssh_policy_regex
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          vars:
            ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"

        - name: Set a fact for the SSH audit policy to use for OpenSSH
          ansible.builtin.set_fact:
            ssh_audit_policy: "{{ ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | community.general.json_query('[0]') }}"
          vars:
            ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"
          when:
            - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug == "list"
            - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug != []

      when:
        - ansible_facts.distribution != "Ubuntu"
        - ssh_audit_policies is defined
        - ssh_audit_policies != []

    - name: SSH profile audit JSON output
      block:

        - name: SSH profile audit JSON output
          ansible.builtin.command: "ssh-audit {{ ssh_audit_options }} -j -P {{ ssh_audit_policy | quote }} {{ ssh_localhost }}"
          check_mode: false
          changed_when: false
          register: ssh_audit_policy_json
          failed_when: ssh_audit_policy_json.rc is not ansible.builtin.regex('^0|3$')

      rescue:

        - name: Print the SSH audit failure stdout
          ansible.builtin.debug:
            var: ssh_audit_policy_json.stdout_lines

        - name: Print the SSH audit failure stderr
          ansible.builtin.debug:
            var: ssh_audit_policy_json.stderr_lines

        - name: Gather facts on listening ports
          community.general.listen_ports_facts:

        - name: Debug TCP ports
          ansible.builtin.debug:
            var: ansible_facts.tcp_listen

        - name: Set facts for the addresses and ports that SSH is listening on and the active ports SSH is not listening on
          ansible.builtin.set_fact:
            ssh_listening_addresses: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.listening_addresses) | unique | sort }}"
            ssh_listening_ports: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.listening_ports) | unique | sort }}"
            ssh_not_listening_ports: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.not_listening_ports) | unique | sort }}"

        - name: Debug SSH listening addresses
          ansible.builtin.debug:
            var: ssh_listening_addresses

        - name: Debug SSH listening ports
          ansible.builtin.debug:
            var: ssh_listening_ports

        - name: Debug SSH not listening ports
          ansible.builtin.debug:
            var: ssh_not_listening_ports

        - name: Fail due to ssh-audit failing
          ansible.builtin.fail:

      when:
        - ssh_audit_policy is defined
        - ssh_audit_policy | length > 0

    - name: Set a fact for the results of the SSH policy audit
      ansible.builtin.set_fact:
        ssh_audit_policy_result: "{{ ssh_audit_policy_json.stdout_lines[0] | ansible.builtin.from_json }}"
      when:
        - ssh_audit_policy_json is defined
        - ssh_audit_policy_json.stdout_lines is defined

    - name: Debug the SSH policy audit errors
      ansible.builtin.debug:
        var: ssh_audit_policy_result.errors
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      when: ssh_audit_policy_result.errors is defined

    # - name: Debug SSH policy audit failure
    #   block:

    #     - name: SSH profile audit human readable output
    #       ansible.builtin.command: "ssh-audit -d --skip-rate-test --timeout={{ ssh_audit_timeout }} -nP {{ ssh_audit_policy | quote }} {{ ssh_localhost }}"
    #       check_mode: false
    #       changed_when: false
    #       register: ssh_audit_policy_human
    #       failed_when: ssh_audit_policy_human.rc is not ansible.builtin.regex('^0|3$')

    #     - name: Debug the SSH profile audit human readable output
    #       ansible.builtin.debug:
    #         var: ssh_audit_policy_human.stdout_lines

    #   when:
    #     - ssh_audit_policy_result is defined
    #     - not ssh_audit_policy_result.passed | bool

    - name: Ensure that the SSH policy audit passed
      ansible.builtin.assert:
        that:
          - ssh_audit_policy_result.passed | bool
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg:
          - "The ssh-audit policy check failed, you can check manually using the following command"
          - "ssh-audit --skip-rate-test --timeout={{ ssh_audit_timeout }} -nP '{{ ssh_audit_policy }}' {{ ssh_localhost }}"
      when:
        - ssh_first_check is defined
        - not ssh_first_check | bool
        - ssh_audit_policy_result is defined

  when:
    - ssh_audit is defined
    - ssh_audit | bool
  tags:
    - ssh
    - ssh_audit
...
