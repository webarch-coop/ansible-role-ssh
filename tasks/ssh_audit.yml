# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects OpenSSH Ansible role.
#
# The Webarchitects OpenSSH Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects OpenSSH Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects OpenSSH Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: OpenSSH audit
  block:

    - name: Check if ssh-audit is available
      ansible.builtin.command: which ssh-audit
      check_mode: false
      changed_when: false
      register: ssh_which_ssh_audit
      failed_when: ssh_which_ssh_audit.rc is not regex('^0|1$')

    - name: Run ssh-audit for fail and info results
      block:

        - name: Audit SSH to check for failures
          ansible.builtin.command: "ssh-audit -n -l fail {{ ssh_localhost }}"
          check_mode: false
          changed_when: false
          register: ssh_audit_fail
          failed_when: ssh_audit_fail.rc is not regex('0|2|3')

        - name: Print the SSH audit failure results if there are any
          ansible.builtin.debug:
            var: ssh_audit_fail.stdout_lines
          when: ssh_audit_fail.stdout_lines != []

        - name: Run SSH audit for info results
          block:

            - name: Audit SSH to check informational results
              ansible.builtin.command: "ssh-audit -n -l info {{ ssh_localhost }}"
              check_mode: false
              changed_when: false
              register: ssh_audit_info
              failed_when:
                - not ssh_first_check | bool
                - ssh_audit_info.rc is not regex('0|2|3')

            - name: Debug the SSH audit info results
              ansible.builtin.debug:
                var: ssh_audit_info.stdout_lines

          when:
            - ssh_check_fail | bool
            - ssh_audit_fail.rc != 0

        - name: Fail due to ssh-audit results
          ansible.builtin.fail:
            msg:
              - "ssh-audit failed with the above results"
          when:
            - not ssh_first_check | bool
            - ssh_check_fail | bool
            - ssh_audit_fail.rc != 0

        - name: Audit SSH and generate JSON output
          ansible.builtin.command: "ssh-audit -j {{ ssh_localhost }}"
          check_mode: false
          changed_when: false
          register: ssh_audit_json
          failed_when: ssh_audit_json.rc is not regex('0|2|3')

        - name: Set a fact for the SSH audit results
          ansible.builtin.set_fact:
            ssh_audit_results: "{{ ssh_audit_json.stdout | from_json }}"

        - name: Debug the SSH audit results
          ansible.builtin.debug:
            var: ssh_audit_results
            verbosity: 2

        - name: Set a fact for the version of OpenSSH installed
          ansible.builtin.set_fact:
            ssh_version: "{{ ssh_audit_results.banner.software | regex_replace('^OpenSSH_') | regex_replace('p1$') }}"

      when:
        - ssh_which_ssh_audit.rc == 0
        - ssh_init is defined
        - ssh_init == "systemd"

    - name: Run ssh-audit policy check
      block:

        - name: Get a list of the ssh-audit server policies
          ansible.builtin.command: ssh-audit -nL
          check_mode: false
          changed_when: false
          register: ssh_audit_policy_list

        - name: Set a fact for the available server policies
          ansible.builtin.set_fact:
            ssh_audit_policies: "{{ ssh_audit_policy_list.stdout_lines | select('regex', '^.*[ ]Server.*$') | map('regex_replace', '^[ ][ ][*][ ].{1}') | map('regex_replace', '.{1}$') }}"

        - name: Debug available server policies
          ansible.builtin.debug:
            var: ssh_audit_policies
            verbosity: 2
          when: ssh_audit_policies is defined

        - name: Ubuntu SSH policy audit
          block:

            - name: Debug SSH audit policy regex
              ansible.builtin.debug:
                var: ssh_audit_ubuntu_policy_regex
                verbosity: 2
              vars:
                ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_distribution_version }} LTS"

            - name: Set a fact for the SSH audit policy to use for Ubuntu
              ansible.builtin.set_fact:
                ssh_audit_policy: "{{ ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | community.general.json_query('[0]') }}"
              vars:
                ssh_audit_ubuntu_policy_regex: "^Hardened Ubuntu Server {{ ansible_distribution_version }} LTS"
              when:
                - ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | type_debug == "list"
                - ssh_audit_policies | select('regex', ssh_audit_ubuntu_policy_regex) | type_debug != []

          when:
            - ansible_distribution == "Ubuntu"
            - ssh_audit_policies is defined
            - ssh_audit_policies != []

        - name: OpenSSH policy audit
          block:

            - name: Debug SSH audit policy regex
              ansible.builtin.debug:
                var: ssh_audit_openssh_policy_regex
                verbosity: 2
              vars:
                ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"

            - name: Set a fact for the SSH audit policy to use for OpenSSH
              ansible.builtin.set_fact:
                ssh_audit_policy: "{{ ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | community.general.json_query('[0]') }}"
              vars:
                ssh_audit_openssh_policy_regex: "^Hardened OpenSSH Server v{{ ssh_version }}"
              when:
                - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug == "list"
                - ssh_audit_policies | select('regex', ssh_audit_openssh_policy_regex) | type_debug != []

          when:
            - ansible_distribution != "Ubuntu"
            - ssh_audit_policies is defined
            - ssh_audit_policies != []

        - name: SSH profile audit
          ansible.builtin.command: "ssh-audit -njP {{ ssh_audit_policy | quote }} {{ ssh_localhost }}"
          check_mode: false
          changed_when: false
          register: ssh_audit_policy_json
          failed_when: ssh_audit_policy_json.rc is not ansible.builtin.regex('^0|3$')
          when:
            - ssh_audit_policy is defined
            - ssh_audit_policy | length > 0

        - name: Set a fact for the results of the SSH policy audit
          ansible.builtin.set_fact:
            ssh_audit_policy_result: "{{ ssh_audit_policy_json.stdout_lines[0] | ansible.builtin.from_json }}"
          when:
            - ssh_audit_policy_json is defined
            - ssh_audit_policy_json.stdout_lines is defined

        - name: Ensure that the SSH policy audit passed
          ansible.builtin.assert:
            that:
              - ssh_audit_policy_result.passed | bool
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
            fail_msg: "{{ ssh_audit_policy_result.errors }}"
          when: ssh_audit_policy_result is defined

      when:
        - ssh_which_ssh_audit.rc == 0
        - ssh_init is defined
        - ssh_init == "systemd"
        - ssh_first_check is defined
        - not ssh_first_check | bool

  tags:
    - ssh
    - ssh_audit
...
