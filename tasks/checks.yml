# Copyright 2019-2025 Chris Croome
#
# This file is part of the Webarchitects OpenSSH Ansible role.
#
# The Webarchitects OpenSSH Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects OpenSSH Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects OpenSSH Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check OpenSSH server variables
  block:

    - name: Set ssh_first_check to false if the variable is not defined
      ansible.builtin.set_fact:
        ssh_first_check: false
      when: ssh_first_check is not defined

    - name: Check the version of SSH installed
      ansible.builtin.command: ssh -V
      check_mode: false
      changed_when: false
      register: ssh_v

    - name: Set a fact for the version of SSH installed
      ansible.builtin.set_fact:
        ssh_version: "{{ ssh_v.stderr.split(' ')[0] | regex_replace('^OpenSSH_') | regex_replace('p.*$') }}"

    - name: Check the SSH version variable is greater than 7.4
      ansible.builtin.assert:
        that:
          - ssh_version is regex('^[0-9]{1,2}[.][0-9]{1,2}$')
          - ssh_version is version('7.4', '>=', strict=true)
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_check_fail | bool

    - name: Print the version of SSH installed
      ansible.builtin.debug:
        var: ssh_version
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    # When in a docker container ssh_init.stdout is usually "sh" or "bash"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      check_mode: false
      changed_when: false
      register: ssh_ps
      failed_when: ssh_ps.rc is not regex('^0|47$')

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        ssh_init: "{{ ssh_ps.stdout }}"
      when: ssh_ps.rc == 0

    - name: When the init check exit code is 47 assume is is because this is a chroot
      ansible.builtin.set_fact:
        ssh_init: chroot
      when: ssh_ps.rc == 47

    - name: Debug the ini system when it is not systemd
      ansible.builtin.debug:
        var: ssh_init
      when: ssh_init != "systemd"
      tags:
        - debug

    - name: Check the runing services
      ansible.builtin.service_facts:

    - name: Debug ssh service status
      ansible.builtin.debug:
        msg: "{{ ansible_facts | community.general.json_query(ssh_jpq.ssh_service) }}"
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Check that sshd is enabled and running
      ansible.builtin.assert:
        that:
          - (ansible_facts | community.general.json_query(ssh_jpq.ssh_service)).status == "enabled"
          - (ansible_facts | community.general.json_query(ssh_jpq.ssh_service)).state == "running"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - ssh_check_fail | bool
        - ssh_first_check is defined
        - not ssh_first_check | bool
        - ssh_init is defined
        - ssh_init == "systemd"

    - name: Gather facts on listening ports
      community.general.listen_ports_facts:

    - name: Debug TCP ports
      ansible.builtin.debug:
        var: ansible_facts.tcp_listen
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Set facts for the addresses and ports that SSH is listening on and the active ports SSH is not listening on
      ansible.builtin.set_fact:
        ssh_listening_addresses: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.listening_addresses) | unique | sort }}"
        ssh_listening_ports: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.listening_ports) | unique | sort }}"
        ssh_not_listening_ports: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.systemd) | community.general.json_query(ssh_jpq.not_listening_ports) | unique | sort }}"

    - name: Debug SSH listening addresses
      ansible.builtin.debug:
        var: ssh_listening_addresses
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Debug SSH listening ports
      ansible.builtin.debug:
        var: ssh_listening_ports
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Debug SSH not listening ports
      ansible.builtin.debug:
        var: ssh_not_listening_ports
        verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
      tags:
        - debug

    - name: Check that the SSH listening ports and addresses are not empty lists
      ansible.builtin.assert:
        that:
          - ssh_listening_addresses is defined
          - ssh_listening_addresses != []
          - ssh_listening_ports is defined
          - ssh_listening_ports != []
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - ssh_check_fail | bool
        - ssh_first_check is defined
        - not ssh_first_check | bool
        - ssh_init is defined
        - ssh_init == "systemd"

    - name: AllowGroups checks
      block:

        - name: Check that the groups in ssh_allow_groups are present
          ansible.builtin.getent:
            database: group
            key: "{{ ssh_group }}"
            fail_key: "{{ ssh_check_fail }}"
          loop: "{{ ssh_allow_groups }}"
          loop_control:
            loop_var: ssh_group
          when: not ssh_first_check | bool

      when:
        - ssh_allow_groups is defined
        - ssh_allow_groups != []

    - name: Chroot checks
      block:

        - name: Check that the chroot users dir is a directory when it is defined
          ansible.builtin.stat:
            path: "{{ ssh_chroot_users_dir }}"
          register: ssh_chroot_users_dir_check

        - name: Debug ssh_chroot_users_dir_check when defined
          ansible.builtin.debug:
            var: ssh_chroot_users_dir_check
            verbosity: 3
          when: ssh_chroot_users_dir_check is defined
          tags:
            - debug

        - name: Check that ssh_chroot_users_dir is defined when chroot is in ssh_allow_groups
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ssh_allow_groups is defined
            - ( "chroot" in ssh_allow_groups )

        - name: Ensure that ssh_chroot_users_dir exists when defined
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir_check.stat.exists | bool
              - ssh_chroot_users_dir_check.stat.isdir | bool
              - ssh_chroot_users_dir_check.stat.uid == 0
              - ssh_chroot_users_dir_check.stat.gid == 0
              - ssh_chroot_users_dir_check.stat.mode is regex('^075[0|5]$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_chroot_users_dir_check is defined

      when: ssh_chroot_users_dir is defined

    - name: Checks for ssh_ci_ips array
      block:

        - name: Check that ssh_ci_ips are IP addresses when defined
          ansible.builtin.assert:
            that:
              - ssh_ip | ansible.utils.ipaddr == ssh_ip
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ci_ips }}"
          loop_control:
            loop_var: ssh_ip

      when: ssh_ci_ips is defined

    - name: Get a list of available SSH ciphers
      ansible.builtin.command: ssh -Q cipher
      check_mode: false
      changed_when: false
      register: ssh_q_cipher
      failed_when: ssh_q_cipher.rc is not regex('^0|255$')

    - name: Fail when the check for SSH ciphers failed
      ansible.builtin.assert:
        that:
          - ssh_q_cipher.rc == 0
          - ssh_q_cipher.stdout_lines | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        msg: "{{ ssh_q_cipher.stderr_lines }}"
      when: ssh_check_fail | bool

    - name: Check the ciphers
      block:

        - name: Set a fact for the list of available SSH ciphers
          ansible.builtin.set_fact:
            ssh_ciphers_available: "{{ ssh_q_cipher.stdout_lines | list }}"

        - name: Debug the list of proposed ciphers
          ansible.builtin.debug:
            var: ssh_ciphers
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Debug the list of available ciphers
          ansible.builtin.debug:
            var: ssh_ciphers_available
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Check that the specified and available SSH cipher lists are not empty
          ansible.builtin.assert:
            that:
              - ssh_ciphers != []
              - ssh_ciphers_available != []
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Generate a list of SSH ciphers that need to be omitted
          ansible.builtin.set_fact:
            ssh_ciphers_omit: "{{ ssh_ciphers | ansible.builtin.difference(ssh_ciphers_available) }}"

        - name: Omit unsupported SSH ciphers
          block:

            - name: List the SSH ciphers that need to be omitted as they are not supported
              ansible.builtin.debug:
                var: ssh_ciphers_omit

            - name: Omit unsupported SSH ciphers
              ansible.builtin.set_fact:
                ssh_ciphers: "{{ ssh_ciphers | reject('search', ssh_cipher_omit) }}"
              loop: "{{ ssh_ciphers_omit }}"
              loop_control:
                loop_var: ssh_cipher_omit

            - name: List SSH ciphers without the ones that can't be used
              ansible.builtin.debug:
                var: ssh_ciphers
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

            - name: Check that updated SSH cipher list is not empty
              ansible.builtin.assert:
                that:
                  - ssh_ciphers != []
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ssh_ciphers_omit != []

        - name: Check that the ciphers wanted are available
          ansible.builtin.assert:
            that:
              - ssh_cipher in ssh_ciphers_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ciphers }}"
          loop_control:
            loop_var: ssh_cipher
          when: ssh_check_fail | bool

      when:
        - ssh_q_cipher.rc == 0
        - ssh_q_cipher.stdout_lines | length > 0

    - name: DenyUsers checks
      block:

        - name: Check that the users in ssh_deny_users are present
          ansible.builtin.getent:
            database: passwd
            key: "{{ ssh_user }}"
            fail_key: "{{ ssh_check_fail }}"
          loop: "{{ ssh_deny_users }}"
          loop_control:
            loop_var: ssh_user
          when: not ssh_first_check | bool

      when:
        - ssh_deny_users is defined
        - ssh_deny_users != []

    - name: GitLab checks
      block:

        - name: Check ssh_gitlab variable
          ansible.builtin.assert:
            that:
              - ssh_gitlab | type_debug == "bool"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the git user is in ssh_allow_groups
          ansible.builtin.assert:
            that:
              - ( "git" in ssh_allow_groups )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the git user is present for GitLab
          ansible.builtin.getent:
            database: passwd
            key: git
            fail_key: "{{ ssh_check_fail }}"
          when: not ssh_first_check | bool

      when:
        - ssh_gitlab is defined
        - ssh_gitlab | bool

    - name: Get a list of available SSH host key algorithms
      ansible.builtin.command: ssh -Q hostkeyalgorithms
      check_mode: false
      changed_when: false
      register: ssh_q_host_key_algorithms
      failed_when: ssh_q_host_key_algorithms.rc is not regex('^0|255$')

    - name: Fail when the check for SSH host key algorithms failed
      ansible.builtin.assert:
        that:
          - ssh_q_host_key_algorithms.rc == 0
          - ssh_q_host_key_algorithms.stdout_lines | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "{{ ssh_q_host_key_algorithms.stderr_lines }}"
      when:
        - ssh_check_fail | bool
        - ssh_first_check is defined
        - not ssh_first_check | bool

    - name: Check the host key algorithms
      block:

        - name: Set a fact for the list of available SSH host key algorithms
          ansible.builtin.set_fact:
            ssh_host_key_algorithms_available: "{{ ssh_q_host_key_algorithms.stdout_lines | list }}"

        - name: Debug the list of proposed SSH host key algorithms
          ansible.builtin.debug:
            var: ssh_host_key_algorithms
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Debug the list of available host key algorithms
          ansible.builtin.debug:
            var: ssh_host_key_algorithms_available
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Check that the specified and available SSH host key algorithm lists are not empty
          ansible.builtin.assert:
            that:
              - ssh_host_key_algorithms != []
              - ssh_host_key_algorithms_available != []
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Generate a list of SSH host key algorithms that need to be omitted
          ansible.builtin.set_fact:
            ssh_host_key_algorithms_omit: "{{ ssh_host_key_algorithms | ansible.builtin.difference(ssh_host_key_algorithms_available) }}"

        - name: Omit unsupported SSH host key algorithms
          block:

            - name: List the SSH host key algorithms that need to be omitted as they are not supported
              ansible.builtin.debug:
                var: ssh_host_key_algorithms_omit
              tags:
                - debug

            - name: Omit unsupported SSH host key algorithms
              ansible.builtin.set_fact:
                ssh_host_key_algorithms: "{{ ssh_host_key_algorithms | reject('search', ssh_host_key_algorithm_omit) }}"
              loop: "{{ ssh_ciphers_omit }}"
              loop_control:
                loop_var: ssh_host_key_algorithm_omit

            - name: List SSH host key algorithms without the ones that can't be used
              ansible.builtin.debug:
                var: ssh_host_key_algorithms
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
              tags:
                - debug

            - name: Check that updated SSH host key algorithms list is not empty
              ansible.builtin.assert:
                that:
                  - ssh_host_key_algorithms != []
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ssh_host_key_algorithms_omit != []

        - name: Check that the host key algorithms wanted are available
          ansible.builtin.assert:
            that:
              - ssh_host_key_algorithm in ssh_host_key_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_host_key_algorithms }}"
          loop_control:
            loop_var: ssh_host_key_algorithm

      when:
        - ssh_q_host_key_algorithms.rc == 0
        - ssh_q_host_key_algorithms.stdout_lines | length > 0

    - name: SSH host keys checks
      ansible.builtin.include_tasks: check_host_key.yml
      loop: "{{ ssh_host_keys }}"
      loop_control:
        loop_var: ssh_host_key
        label: "{{ ssh_host_key.name }}"
      when: ssh_host_keys is defined

    - name: Get a list of available SSH kex algorithms
      ansible.builtin.command: ssh -Q kexalgorithms
      check_mode: false
      changed_when: false
      register: ssh_q_kex_algorithms
      failed_when: ssh_q_kex_algorithms.rc is not regex('^0|255$')

    - name: Fail when the check for SSH kex algorithms failed
      ansible.builtin.assert:
        that:
          - ssh_q_kex_algorithms.rc == 0
          - ssh_q_kex_algorithms.stdout_lines | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "{{ ssh_q_kex_algorithms.stderr_lines }}"
      when: ssh_check_fail | bool

    - name: Check the kex algorithms
      block:

        - name: Set a fact for the list of available SSH kex algorithms
          ansible.builtin.set_fact:
            ssh_kex_algorithms_available: "{{ ssh_q_kex_algorithms.stdout_lines | list }}"

        - name: Debug the list of proposed kex algorithms
          ansible.builtin.debug:
            var: ssh_kex_algorithms
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Debug the list of available kex algorithms
          ansible.builtin.debug:
            var: ssh_kex_algorithms_available
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Check that the specified and available SSH kex algorithm lists are not empty
          ansible.builtin.assert:
            that:
              - ssh_kex_algorithms != []
              - ssh_kex_algorithms_available != []
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Generate a list of SSH kex algorithms that need to be omitted
          ansible.builtin.set_fact:
            ssh_kex_algorithms_omit: "{{ ssh_kex_algorithms | ansible.builtin.difference(ssh_kex_algorithms_available) }}"

        - name: Omit unsupported SSH kex algorithms
          block:

            - name: List the SSH kex algorithms that need to be omitted as they are not supported
              ansible.builtin.debug:
                var: ssh_kex_algorithms_omit

            - name: Omit unsupported SSH kex algorithms
              ansible.builtin.set_fact:
                ssh_kex_algorithms: "{{ ssh_kex_algorithms | reject('search', ssh_kex_algorithm_omit) }}"
              loop: "{{ ssh_kex_algorithms_omit }}"
              loop_control:
                loop_var: ssh_kex_algorithm_omit

            - name: List SSH kex algorithms without the ones that can't be used
              ansible.builtin.debug:
                var: ssh_kex_algorithms
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"

            - name: Check that updated SSH kex algorithms list is not empty
              ansible.builtin.assert:
                that:
                  - ssh_kex_algorithms != []
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ssh_kex_algorithms_omit != []

        - name: Check that the kex algorithms wanted are available
          ansible.builtin.assert:
            that:
              - ssh_kex_algorithm in ssh_kex_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_kex_algorithms }}"
          loop_control:
            loop_var: ssh_kex_algorithm

      when:
        - ssh_q_kex_algorithms.rc == 0
        - ssh_q_kex_algorithms.stdout_lines | length > 0

    - name: Check ListenAddress
      block:

        - name: Ensure that all ListenAddress are IP addresses
          ansible.builtin.assert:
            that:
              - ssh_ip | ansible.utils.ipaddr == ssh_ip
            fail_msg: "The SSH ListenAddress is set to {{ ssh_ip }} and the ansible.utils.ipaddr test for this returns {{ ssh_ip | ansible.utils.ipaddr }}"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ssh_ip != "0.0.0.0"
            - ssh_ip != "::"
            - ssh_ip != "*"
          loop: "{{ ssh_listen_addresses }}"
          loop_control:
            loop_var: ssh_ip

        - name: Check that the SSH listening addresses match the configuration
          ansible.builtin.assert:
            that:
              - ssh_listening_addresses == ssh_listen_addresses | sort
            fail_msg: "The ssh_listening_addresses are {{ ssh_listening_addresses | join(', ') }} and the ssh_listen_addresses are {{ ssh_listen_addresses | sort | join(', ') }} and they need to match."
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ssh_check_fail | bool
            - ssh_first_check is defined
            - not ssh_first_check | bool
            - ssh_init is defined
            - ssh_init == "systemd"
            # Ubuntu listens on * and config is for 0.0.0.0 or :: or both
            - (ssh_listening_addresses[0] != "*") and ((ssh_listen_addresses[0] != "0.0.0.0") or (ssh_listen_addresses[0] != "::") or (ssh_listen_addresses | sort != ["::","0.0.0.0"]))

      when:
        - ssh_listen_addresses is defined
        - ssh_listen_addresses != []

    - name: Check ssh_local_hosts variables
      block:

        - name: Debug ssh_local_hosts variables
          ansible.builtin.debug:
            msg:
              - "ssh_local_hosts_directory:{% if ssh_local_hosts_directory is defined %} {{ ssh_local_hosts_directory }}{% endif %}"
              - "ssh_local_hosts_file:{% if ssh_local_hosts_file is defined %} {{ ssh_local_hosts_file }}{% endif %}"
              - "ssh_local_hosts_host:{% if ssh_local_hosts_host is defined %} {{ ssh_local_hosts_host }}{% endif %}"
              - "ssh_local_hosts_hostname:{% if ssh_local_hosts_hostname is defined %} {{ ssh_local_hosts_hostname }}{% endif %}"
              - "ssh_local_hosts_user_known_hosts_file:{% if ssh_local_hosts_user_known_hosts_file is defined %} {{ ssh_local_hosts_user_known_hosts_file }}{% endif %}"
              - "ssh_local_hosts_port:{% if ssh_local_hosts_port is defined %} {{ ssh_local_hosts_port }}{% endif %}"
              - "ssh_local_hosts_readme:{% if ssh_local_hosts_readme is defined %} {{ ssh_local_hosts_readme }}{% endif %}"
              - "ssh_ports:{% if ssh_ports is defined %} {{ ssh_ports | join(' ') }}{% endif %}"
              - "ssh_listening_ports:{% if ssh_listening_ports is defined %} {{ ssh_listening_ports | join(' ') }}{% endif %}"
              - "ssh_not_listening_ports:{% if ssh_not_listening_ports is defined %} {{ ssh_not_listening_ports | join(' ') }}{% endif %}"
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Check ssh_local_hosts_directory variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_directory | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_directory is defined

        - name: Check ssh_local_hosts_file variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_file | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_file is defined

        - name: Check ssh_local_hosts_host variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_host | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_host is defined

        - name: Check ssh_local_host_hostname variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_hostname | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_hostname is defined

        - name: Check ssh_local_host_user_known_hosts_file variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_user_known_hosts_file | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_user_known_hosts_file is defined

        - name: Check ssh_local_host_port variable is a number less than 65536
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_port | int <= 65535
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_port is defined

        - name: Check ssh_local_host_port variable is in the list of ssh_ports
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_port | int in ssh_ports
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_port is defined

        - name: Check ssh_local_host_port variable is not in the list of ports that others services are listening on
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_port not in ssh_not_listening_ports
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ssh_local_hosts_port is defined
            - ssh_not_listening_ports is defined
            - ssh_not_listening_ports != []

        - name: Check ssh_local_host_readme variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_readme | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_readme is defined

        - name: Check ssh_local_host_readme_host variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_readme_host | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_readme_host is defined

      when:
        - ssh_local_hosts is defined
        - ssh_local_hosts | bool

    - name: Get a list of available SSH macs
      ansible.builtin.command: ssh -Q mac
      check_mode: false
      changed_when: false
      register: ssh_q_mac
      failed_when: ssh_q_mac.rc is not regex('^0|255$')

    - name: Fail when the check for SSH macs failed
      ansible.builtin.assert:
        that:
          - ssh_q_mac.rc == 0
          - ssh_q_mac.stdout_lines | length > 0
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
        fail_msg: "{{ ssh_q_mac.stderr_lines }}"
      when: ssh_check_fail | bool

    - name: Check the SSH macs
      block:

        - name: Set a fact for the list of available SSH macs
          ansible.builtin.set_fact:
            ssh_macs_available: "{{ ssh_q_mac.stdout_lines | list }}"

        - name: Debug the list of SSH macs
          ansible.builtin.debug:
            var: ssh_macs
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Debug the list of available SSH macs
          ansible.builtin.debug:
            var: ssh_macs_available
            verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
          tags:
            - debug

        - name: Check that the specified and available SSH mac lists are not empty
          ansible.builtin.assert:
            that:
              - ssh_macs != []
              - ssh_macs_available != []
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Generate a list of SSH macs that need to be omitted
          ansible.builtin.set_fact:
            ssh_macs_omit: "{{ ssh_macs | ansible.builtin.difference(ssh_macs_available) }}"

        - name: Omit unsupported SSH macs
          block:

            - name: List the SSH macs that need to be omitted as they are not supported
              ansible.builtin.debug:
                var: ssh_macs_omit
              tags:
                - debug

            - name: Omit unsupported SSH macs
              ansible.builtin.set_fact:
                ssh_macs: "{{ ssh_macs | reject('search', ssh_mac_omit) }}"
              loop: "{{ ssh_macs_omit }}"
              loop_control:
                loop_var: ssh_mac_omit

            - name: List SSH macs without the ones that can't be used
              ansible.builtin.debug:
                var: ssh_macs
                verbosity: "{% if ansible_check_mode | bool or ansible_diff_mode | bool %}0{% else %}1{% endif %}"
              tags:
                - debug

            - name: Check that updated SSH mac list is not empty
              ansible.builtin.assert:
                that:
                  - ssh_macs != []
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

          when: ssh_macs_omit != []

      when: ssh_q_mac.rc == 0

    - name: Check that the macs wanted are available
      ansible.builtin.assert:
        that:
          - ssh_mac in ssh_macs_available
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ ssh_macs }}"
      loop_control:
        loop_var: ssh_mac
      when: ssh_check_fail | bool

    - name: SSH Port checks
      block:

        - name: Check ssh_ports values
          ansible.builtin.assert:
            that:
              - ssh_port | type_debug == "int"
              - ssh_port > 0
              - ssh_port < 61000
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ports }}"
          loop_control:
            loop_var: ssh_port

        - name: Check that other services are not listening on any of the the SSH ports
          ansible.builtin.assert:
            that:
              - ssh_port not in ssh_not_listening_ports
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
            fail_msg: "ssh_not_listening_ports are {{ ssh_not_listening_ports | join(', ') }} and the ssh_ports are {{ ssh_ports | join(', ') }}."
          loop: "{{ ssh_ports }}"
          loop_control:
            loop_var: ssh_port
          when:
            - ssh_check_fail | bool
            - ssh_not_listening_ports is defined
            - ssh_not_listening_ports != []

        - name: Check that the SSH listening ports match the configuration
          ansible.builtin.assert:
            that:
              - ssh_listening_ports == ssh_ports | sort
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
            fail_msg: "ssh_listening_ports is {{ ssh_listening_ports | join(', ') }} and the ssh_ports are {{ ssh_ports | join(', ') }}."
          when:
            - ssh_check_fail | bool
            - ssh_first_check is defined
            - not ssh_first_check | bool
            - ssh_init is defined
            - ssh_init == "systemd"

      when:
        - ssh_ports is defined
        - ssh_ports != []

  tags:
    - ssh
    - ssh_audit
    - ssh_check
...
