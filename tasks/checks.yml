# Copyright 2019-2023 Chris Croome
#
# This file is part of the Webarchitects OpenSSH Ansible role.
#
# The Webarchitects OpenSSH Ansible role is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# The Webarchitects OpenSSH Ansible role is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with the Webarchitects OpenSSH Ansible role. If not, see <https://www.gnu.org/licenses/>.
---
- name: Check OpenSSH server variables
  block:

    - name: Set ssh_first_check to false if the variable is not defined
      ansible.builtin.set_fact:
        ssh_first_check: false
      when: ssh_first_check is not defined

    # When in a docker container ssh_init.stdout == "sh" or "bash"
    - name: Check if system has been booted with systemd as init system
      ansible.builtin.command: ps -p 1 -o comm=
      changed_when: false
      check_mode: false
      register: ssh_ps

    - name: Set a fact for the init system
      ansible.builtin.set_fact:
        ssh_init: "{{ ssh_ps.stdout }}"

    - name: Debug the ini system when it is not systemd
      ansible.builtin.debug:
        var: ssh_init
      when: ssh_init != "systemd"

    - name: Check the runing services
      ansible.builtin.service_facts:
      register: ssh_service_facts

    - name: Debug ssh service status
      ansible.builtin.debug:
        msg: "{{ ssh_service_facts | community.general.json_query(ssh_jpq.service) }}"
        verbosity: 2

    - name: Check that sshd is enabled and running
      ansible.builtin.assert:
        that:
          - (ssh_service_facts | community.general.json_query(ssh_jpq.service)).status == "enabled"
          - (ssh_service_facts | community.general.json_query(ssh_jpq.service)).state == "running"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - ssh_init is defined
        - ssh_init == "systemd"
        - ssh_first_check is defined
        - not ssh_first_check | bool

    - name: Gather facts on listening ports
      community.general.listen_ports_facts:

    - name: Debug TCP ports
      ansible.builtin.debug:
        var: ansible_facts.tcp_listen
        verbosity: 2

    - name: Set a fact for the port that SSH is listening on
      ansible.builtin.set_fact:
        ssh_listening: "{{ ansible_facts.tcp_listen | community.general.json_query(ssh_jpq.listen) }}"

    - name: Debug SSH listening ports
      ansible.builtin.debug:
        var: ssh_listening
        verbosity: 2

    - name: Check that the SSH listening ports match the configuration
      ansible.builtin.assert:
        that:
          - ssh_listening | sort == ssh_listen_addresses | sort
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when:
        - ssh_init is defined
        - ssh_init == "systemd"
        - ssh_first_check is defined
        - not ssh_first_check | bool

    - name: Check the version of SSH installed
      ansible.builtin.command: ssh -V
      check_mode: false
      changed_when: false
      register: ssh_v

    - name: Set a fact for the version of SSH installed
      ansible.builtin.set_fact:
        ssh_version: "{{ ssh_v.stderr.split(' ')[0] | regex_replace('^OpenSSH_') | regex_replace('p.*$') }}"

    - name: Print the version of SSH installed
      ansible.builtin.debug:
        var: ssh_version
        verbosity: 2

    - name: Check ssh_allow_agent_forwarding variable
      ansible.builtin.assert:
        that:
          - ssh_allow_agent_forwarding | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_allow_agent_forwarding is defined

    - name: AllowGroups checks
      block:

        - name: Check ssh_allow_groups variable
          ansible.builtin.assert:
            that:
              - ssh_allow_groups | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the groups in ssh_allow_groups are present
          ansible.builtin.getent:
            database: group
            key: "{{ group }}"
            fail_key: "{{ ssh_check_fail }}"
          loop: "{{ ssh_allow_groups }}"
          loop_control:
            loop_var: group
          when:
            - ssh_check_fail | bool
            - not ssh_first_check | bool

      when: ssh_allow_groups is defined

    - name: Check ssh_allow_tcp_forwarding variable
      ansible.builtin.assert:
        that:
          - ssh_allow_tcp_forwarding | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
          - ssh_allow_tcp_forwarding is regex('all|local|no|remote|yes')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_allow_tcp_forwarding is defined

    - name: Check ssh_authentication_methods variable
      ansible.builtin.assert:
        that:
          - ssh_authentication_methods | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check ssh_check_fail variable
      ansible.builtin.assert:
        that:
          - ssh_check_fail | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Chroot checks
      block:

        - name: Check ssh_chroot_users_dir variable
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the chroot users dir is a directory when it is defined
          ansible.builtin.stat:
            path: "{{ ssh_chroot_users_dir }}"
          register: ssh_chroot_users_dir_check

        - name: Debug ssh_chroot_users_dir_check when defined
          ansible.builtin.debug:
            var: ssh_chroot_users_dir_check
            verbosity: 3
          when: ssh_chroot_users_dir_check is defined

        - name: Check that ssh_chroot_users_dir is defined when chroot is in ssh_allow_groups
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir is defined
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: (ssh_allow_groups is defined) and ("chroot" in ssh_allow_groups)

        - name: Ensure that ssh_chroot_users_dir exists when defined
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir_check.stat.exists | bool
              - ssh_chroot_users_dir_check.stat.isdir | bool
              - ssh_chroot_users_dir_check.stat.uid == 0
              - ssh_chroot_users_dir_check.stat.gid == 0
              - (ssh_chroot_users_dir_check.stat.mode == "0755") or (ssh_chroot_users_dir_check.stat.mode == "0750")
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_chroot_users_dir_check is defined

      when: ssh_chroot_users_dir is defined

    - name: Checks for ssh_ci_ips array
      block:

        - name: Check ssh_ci_ips variable
          ansible.builtin.assert:
            that:
              - ssh_ci_ips | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that ssh_ci_ips are IP addresses when defined
          ansible.builtin.assert:
            that:
              - ip | ansible.utils.ipaddr == ip
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ci_ips }}"
          loop_control:
            loop_var: ip

      when: ssh_ci_ips is defined

    - name: Check the ciphers if specified
      block:

        - name: Check ssh_ciphers variable
          ansible.builtin.assert:
            that:
              - ssh_ciphers | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Get a list of available ciphers
          ansible.builtin.command: ssh -Q cipher
          check_mode: false
          changed_when: false
          register: ssh_q_cipher

        - name: Set a fact for the list of available ciphers
          ansible.builtin.set_fact:
            ssh_ciphers_available: "{{ ssh_q_cipher.stdout_lines | list }}"

        - name: Debug the list of available ciphers
          ansible.builtin.debug:
            var: ssh_ciphers_available
            verbosity: 2

        - name: Check that the ciphers wanted are available
          ansible.builtin.assert:
            that:
              - cipher in ssh_ciphers_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ciphers }}"
          loop_control:
            loop_var: cipher

      when: ssh_ciphers is defined

    - name: DenyUsers checks
      block:

        - name: Check ssh_deny_users variable type
          ansible.builtin.assert:
            that:
              - ssh_deny_users | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the users in ssh_deny_users are present
          ansible.builtin.getent:
            database: passwd
            key: "{{ user }}"
            fail_key: "{{ ssh_check_fail }}"
          loop: "{{ ssh_deny_users }}"
          loop_control:
            loop_var: user
          when:
            - ssh_check_fail | bool
            - not ssh_first_check | bool

      when: ssh_deny_users is defined

    - name: GitLab checks
      block:

        - name: Check ssh_gitlab variable
          ansible.builtin.assert:
            that:
              - ssh_gitlab | type_debug == "bool"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the git user is in ssh_allow_groups
          ansible.builtin.assert:
            that:
              - ("git" in ssh_allow_groups)
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check that the git user is present for GitLab
          ansible.builtin.getent:
            database: passwd
            key: git
            fail_key: "{{ ssh_check_fail }}"
          when:
            - ssh_check_fail | bool
            - not ssh_first_check | bool

      when: (ssh_gitlab is defined) and (ssh_gitlab | bool)

    - name: Host key algorithm checks
      block:

        - name: Check ssh_host_key_algorithms variable
          ansible.builtin.assert:
            that:
              - ssh_host_key_algorithms | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Get a list of available host key algorithms
          ansible.builtin.command: ssh -Q hostkeyalgorithms
          check_mode: false
          changed_when: false
          register: ssh_q_host_key_algorithms

        - name: Set a fact for the list of available hostkeyalgorithms
          ansible.builtin.set_fact:
            ssh_host_key_algorithms_available: "{{ ssh_q_host_key_algorithms.stdout_lines | list }}"

        - name: Debug the list of available host key algorithms
          ansible.builtin.debug:
            var: ssh_host_key_algorithms_available
            verbosity: 2

        - name: Check that the host key algorithms wanted are available
          ansible.builtin.assert:
            that:
              - algo in ssh_host_key_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_host_key_algorithms }}"
          loop_control:
            loop_var: algo

      rescue:

        - name: SSH host key algorithms check failed
          ansible.builtin.debug:
            var: ssh_q_host_key_algorithms.stderr
          when: ssh_q_host_key_algorithms.rc == 255

        - name: Fail when the check for host key algorithms failed
          ansible.builtin.fail:
          when: ssh_q_host_key_algorithms.rc == 255

        - name: Omit unsupported SSH host key algorithms
          ansible.builtin.set_fact:
            ssh_host_key_algorithms: "{{ ssh_host_key_algorithms_available | ansible.builtin.intersect(ssh_host_key_algorithms) }}"

        - name: List omitted SSH host key algorithms
          ansible.builtin.debug:
            msg: "{{ ssh_host_key_algorithms | ansible.builtin.difference(ssh_host_key_algorithms_available) }}"

      when: ssh_host_key_algorithms is defined

    - name: Host keys checks
      ansible.builtin.include_tasks: check_host_key.yml
      loop: "{{ ssh_host_keys }}"
      loop_control:
        loop_var: ssh_host_key
        label: "{{ ssh_host_key.name }}"
      when: ssh_host_keys is defined

    - name: Kex algorithm checks
      block:

        - name: Check ssh_kex_algorithms variable
          ansible.builtin.assert:
            that:
              - ssh_kex_algorithms | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Get a list of available kex algorithms
          ansible.builtin.command: ssh -Q kexalgorithms
          check_mode: false
          changed_when: false
          register: ssh_q_kex_algorithms

        - name: Set a fact for the list of available kex algorithms
          ansible.builtin.set_fact:
            ssh_kex_algorithms_available: "{{ ssh_q_kex_algorithms.stdout_lines | list }}"

        - name: Debug the list of available kex algorithms
          ansible.builtin.debug:
            var: ssh_kex_algorithms_available
            verbosity: 2

        - name: Check that the kex algorithms wanted are available
          ansible.builtin.assert:
            that:
              - algo in ssh_kex_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_kex_algorithms }}"
          loop_control:
            loop_var: algo

      rescue:

        - name: Kex algorithms check failed
          ansible.builtin.debug:
            var: ssh_q_kex_algorithms.stderr
          when: ssh_q_kex_algorithms.rc == 255

        - name: Fail when the check for kex algorithms failed
          ansible.builtin.fail:
          when: ssh_q_kex_algorithms.rc == 255

        - name: Omit unsupported SSH kex algorithms
          ansible.builtin.set_fact:
            ssh_kex_algorithms: "{{ ssh_kex_algorithms_available | ansible.builtin.intersect(ssh_kex_algorithms) }}"

        - name: List omitted SSH kex algorithms
          ansible.builtin.debug:
            msg: "{{ ssh_kex_algorithms | ansible.builtin.difference(ssh_kex_algorithms_available) }}"

      when: ssh_kex_algorithms is defined

    - name: Check ListenAddress
      block:

        - name: Check ssh_listen_addresses variable
          ansible.builtin.assert:
            that:
              - ssh_listen_addresses | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Ensure that all ListenAddress are IP addresses
          ansible.builtin.assert:
            that:
              - ip | ansible.utils.ipaddr == ip
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when:
            - ip != "0.0.0.0"
            - ip != "::"
          loop: "{{ ssh_listen_addresses }}"
          loop_control:
            loop_var: ip

      when: ssh_listen_addresses is defined

    - name: Check ssh_local_hosts variable
      ansible.builtin.assert:
        that:
          - ssh_local_hosts | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_local_hosts is defined

    - name: Check ssh_local_hosts variables
      block:

        - name: Check ssh_local_hosts_directory variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_directory | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_directory | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_directory is defined

        - name: Check ssh_local_hosts_file variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_file | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_file | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_file is defined

        - name: Check ssh_local_hosts_host variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_host | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_host | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_host is defined

        - name: Check ssh_local_host_hostname variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_hostname | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_hostname | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_hostname is defined

        - name: Check ssh_local_host_user_known_hosts_file variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_user_known_hosts_file | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_user_known_hosts_file | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_user_known_hosts_file is defined

        - name: Check ssh_local_host_port variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_port | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_port is defined

        - name: Check ssh_local_host_readme variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_readme | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_readme | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_readme is defined

        - name: Check ssh_local_host_readme_host variable
          ansible.builtin.assert:
            that:
              - ssh_local_hosts_readme_host | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
              - ssh_local_hosts_readme_host | length > 0
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_local_hosts_readme_host is defined

      when:
        - ssh_local_hosts is defined
        - ssh_local_hosts | bool

    - name: Mac checks
      block:

        - name: Check ssh_macs variable
          ansible.builtin.assert:
            that:
              - ssh_macs | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Get a list of available macs
          ansible.builtin.command: ssh -Q mac
          check_mode: false
          changed_when: false
          register: ssh_q_mac

        - name: Set a fact for the list of available macs
          ansible.builtin.set_fact:
            ssh_macs_available: "{{ ssh_q_mac.stdout_lines | list }}"

        - name: Debug the list of available macs
          ansible.builtin.debug:
            var: ssh_macs_available
            verbosity: 2

        - name: Check that the macs wanted are available
          ansible.builtin.assert:
            that:
              - mac in ssh_macs_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_macs }}"
          loop_control:
            loop_var: mac

      when: ssh_macs is defined

    - name: Check ssh_password_authentication variable
      ansible.builtin.assert:
        that:
          - ssh_password_authentication | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check ssh_permit_root_login variable
      ansible.builtin.assert:
        that:
          - ssh_permit_root_login | type_debug is regex('^str|AnsibleUnicode|AnsibleUnsafeText$')
          - ssh_permit_root_login is regex('forced-commands-only|no|prohibit-password|yes')
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: SSH Port checks
      block:

        - name: Check ssh_ports variable
          ansible.builtin.assert:
            that:
              - ssh_ports | type_debug == "list"
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

        - name: Check ssh_ports values
          ansible.builtin.assert:
            that:
              - ssh_port | type_debug == "int"
              - ssh_port > 0
              - ssh_port < 61000
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ports }}"
          loop_control:
            loop_var: ssh_port

      when: ssh_ports is defined

    - name: Check ssh_pubkey_authentication variable
      ansible.builtin.assert:
        that:
          - ssh_pubkey_authentication | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

    - name: Check ssh_root_keypair variable
      ansible.builtin.assert:
        that:
          - ssh_root_keypair | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_root_keypair is defined

    - name: Check ssh_scan_keys variable
      ansible.builtin.assert:
        that:
          - ssh_scan_keys | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_scan_keys is defined

    - name: Check ssh_x11_forwarding variable
      ansible.builtin.assert:
        that:
          - ssh_x11_forwarding | type_debug == "bool"
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ssh_x11_forwarding is defined

  tags:
    - ssh
    - ssh_audit
    - ssh_check
...
