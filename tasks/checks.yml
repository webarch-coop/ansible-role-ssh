---
- name: Check OpenSSH server variables
  block:

    - name: Check that the groups in ssh_allow_groups are present
      ansible.builtin.getent:
        database: group
        key: "{{ group }}"
        fail_key: "{{ ssh_check_fail }}"
      loop: "{{ ssh_allow_groups }}"
      loop_control:
        loop_var: group
      when: ssh_allow_groups is defined

    - name: Check that ssh_chroot_users_dir is defined when chroot is in ssh_allow_groups
      ansible.builtin.assert:
        that:
          - ssh_chroot_users_dir is defined
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      when: ( ssh_allow_groups is defined ) and ( "chroot" in ssh_allow_groups )

    - name: Chroot checks
      block:

        - name: "Check that {{ ssh_chroot_users_dir }} is a directory when it is defined"
          ansible.builtin.stat:
            path: "{{ ssh_chroot_users_dir }}"
          register: ssh_chroot_users_dir_check

        - name: Debug ssh_chroot_users_dir_check when defined
          ansible.builtin.debug:
            var: ssh_chroot_users_dir_check
            verbosity: 3
          when: ssh_chroot_users_dir_check is defined

        - name: Ensure that ssh_chroot_users_dir exists when defined
          ansible.builtin.assert:
            that:
              - ssh_chroot_users_dir_check.stat.exists | bool
              - ssh_chroot_users_dir_check.stat.isdir | bool
              - ssh_chroot_users_dir_check.stat.uid == 0
              - ssh_chroot_users_dir_check.stat.gid == 0
              - ( ssh_chroot_users_dir_check.stat.mode == "0755" ) or ( ssh_chroot_users_dir_check.stat.mode == "0750" )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          when: ssh_chroot_users_dir_check is defined

      when: ssh_chroot_users_dir is defined

    - name: Check that ssh_ci_ips are IP addresses when defined
      ansible.builtin.assert:
        that:
          - ip | ansible.utils.ipaddr | bool
        quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
      loop: "{{ ssh_ci_ips }}"
      loop_control:
        loop_var: ip
      when: ssh_ci_ips is defined

    - name: Check the ciphers if specified
      block:

        - name: Get a list of available ciphers
          ansible.builtin.command: ssh -Q cipher
          check_mode: false
          changed_when: false
          register: ssh_q_cipher

        - name: Set a fact for the list of available ciphers
          ansible.builtin.set_fact:
            ssh_ciphers_available: "{{ ssh_q_cipher.stdout_lines | list }}"

        - name: Debug the list of available ciphers
          ansible.builtin.debug:
            var: ssh_ciphers_available
            verbosity: 2

        - name: Check that the ciphers wanted are available
          ansible.builtin.assert:
            that:
              - cipher in ssh_ciphers_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_ciphers }}"
          loop_control:
            loop_var: cipher

      when: ssh_ciphers is defined

    - name: Check that the users in ssh_deny_users are present
      ansible.builtin.getent:
        database: passwd
        key: "{{ user }}"
        fail_key: "{{ ssh_check_fail }}"
      loop: "{{ ssh_deny_users }}"
      loop_control:
        loop_var: user
      when: ssh_deny_users is defined

    - name: GitLab checks
      block:

        - name: Check that the git user is present for GitLab
          ansible.builtin.getent:
            database: passwd
            key: git
            fail_key: "{{ ssh_check_fail }}"

        - name: Check that the git user is in ssh_allow_groups
          ansible.builtin.assert:
            that:
              - ( "git" in ssh_allow_groups )
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"

      when: ( ssh_gitlab is defined ) and ( ssh_gitlab | bool )

    - name: Host key algorithm checks
      block:

        - name: Get a list of available host key algorithms
          ansible.builtin.command: ssh -Q hostkeyalgorithms
          check_mode: false
          changed_when: false
          register: ssh_q_host_key_algorithms

        - name: Set a fact for the list of available hostkeyalgorithms
          ansible.builtin.set_fact:
            ssh_host_key_algorithms_available: "{{ ssh_q_host_key_algorithms.stdout_lines | list }}"

        - name: Debug the list of available host key algorithms
          ansible.builtin.debug:
            var: ssh_host_key_algorithms_available
            verbosity: 2

        - name: Check that the host key algorithms wanted are available
          ansible.builtin.assert:
            that:
              - algo in ssh_host_key_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_host_key_algorithms }}"
          loop_control:
            loop_var: algo

      when: ssh_host_key_algorithms is defined

    - name: Host keys checks
      block:

        - name: Check that the ssh_host_keys are present
          ansible.builtin.stat:
            path: "{{ file }}"
          loop: "{{ ssh_host_keys }}"
          loop_control:
            loop_var: file
          register: ssh_host_keys_stat

        - name: Debug the results of the host key check
          ansible.builtin.debug:
            var: ssh_host_keys_stat
            verbosity: 2

        - name: Host key checks
          block:

            - name: Check that all the host keys exist
              ansible.builtin.assert:
                that:
                  - file.stat.exists | bool
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              loop: "{{ ssh_host_keys_stat.results }}"
              loop_control:
                loop_var: file
                label: "{{ file.file | basename }}"

            - name: Check the host keys attributes
              ansible.builtin.assert:
                that:
                  - file.stat.isreg | bool
                  - file.stat.mode == "0600"
                  - file.stat.gid == 0
                  - file.stat.gr_name == "root"
                  - file.stat.uid == 0
                quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
              when: file.stat.exists | bool
              loop: "{{ ssh_host_keys_stat.results }}"
              loop_control:
                loop_var: file
                label: "{{ file.file | basename }}"

          rescue:

            - name: It appears that some SSH host keys are missing
              ansible.builtin.fail:
                msg:
                  - "Please generate missing host keys, for example using the following commands"
                  - "cd /etc/ssh"
                  - "rm -i ssh_host_*"
                  - "ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N ''"
                  - "ssh-keygen -t rsa -b 4096 -f ssh_host_rsa_key -N ''"
                  - "For more infformation see:"
                  - "https://www.ssh-audit.com/hardening_guides.html"

          when: ssh_check_fail | bool

      when: ssh_host_keys is defined

    - name: Kex algorithm checks
      block:

        - name: Get a list of available kex algorithms
          ansible.builtin.command: ssh -Q KexAlgorithms
          check_mode: false
          changed_when: false
          register: ssh_q_kex_algorithms

        - name: Set a fact for the list of available kex algorithms
          ansible.builtin.set_fact:
            ssh_kex_algorithms_available: "{{ ssh_q_kex_algorithms.stdout_lines | list }}"

        - name: Debug the list of available kex algorithms
          ansible.builtin.debug:
            var: ssh_kex_algorithms_available
            verbosity: 2

        - name: Check that the ciphers wanted are available
          ansible.builtin.assert:
            that:
              - algo in ssh_kex_algorithms_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_kex_algorithms }}"
          loop_control:
            loop_var: algo

      when: ssh_kex_algorithms is defined

    - name: Ensure that all ListenAddress are IP addresses
      ansible.builtin.assert:
        that:
          - ip | ansible.utils.ipaddr | bool
      when:
        - ip != "0.0.0.0"
        - ip != "::"
      loop: "{{ ssh_listen_addresses }}"
      loop_control:
        loop_var: ip

    - name: Mac checks
      block:

        - name: Get a list of available macs
          ansible.builtin.command: ssh -Q mac
          check_mode: false
          changed_when: false
          register: ssh_q_mac

        - name: Set a fact for the list of available macs
          ansible.builtin.set_fact:
            ssh_macs_available: "{{ ssh_q_mac.stdout_lines | list }}"

        - name: Debug the list of available macs
          ansible.builtin.debug:
            var: ssh_macs_available
            verbosity: 2

        - name: Check that the macs wanted are available
          ansible.builtin.assert:
            that:
              - mac in ssh_macs_available
            quiet: "{% if ansible_verbosity == 0 %}true{% else %}false{% endif %}"
          loop: "{{ ssh_macs }}"
          loop_control:
            loop_var: mac

      when: ssh_macs is defined

    - name: Check if ssh-audit is available
      ansible.builtin.command: which ssh-audit
      check_mode: false
      changed_when: false
      register: ssh_which_ssh_audit
      failed_when: ssh_which_ssh_audit.rc is not regex('^0|1$')
      tags:
        - ssh_audit

    - name: Run ssh-audit for fail and info results
      block:

        - name: Audit SSH to check for failures
          ansible.builtin.command: ssh-audit -n -l fail localhost
          check_mode: false
          changed_when: false
          register: ssh_audit_fail
          failed_when: ssh_audit_fail.rc is not regex('0|2|3')

        - name: Print the SSH audit failure results if there are any
          ansible.builtin.debug:
            var: ssh_audit_fail.stdout_lines
          when: ssh_audit_fail.stdout_lines != []

        - name: Run SSH audit for info results
          block:

            - name: Audit SSH to check informational results
              ansible.builtin.command: ssh-audit -n -l info localhost
              check_mode: false
              changed_when: false
              register: ssh_audit_info
              failed_when:
                - not ssh_first_check | bool
                - ssh_audit_info.rc is not regex('0|2|3')

            - name: Debug the SSH audit info results
              ansible.builtin.debug:
                var: ssh_audit_info.stdout_lines

          when:
            - ssh_check_fail | bool
            - ssh_audit_fail.rc != 0

        - name: Fail due to ssh-audit results
          ansible.builtin.fail:
            msg:
              - "ssh-audit failed with the above results"
          when:
            - not ssh_first_check | bool
            - ssh_check_fail | bool
            - ssh_audit_fail.rc != 0

        - name: Audit SSH and generate JSON output
          ansible.builtin.command: ssh-audit -j localhost
          check_mode: false
          changed_when: false
          register: ssh_audit_json
          failed_when: ssh_audit_json.rc is not regex('0|2|3')

        - name: Set a fact for the SSH audit results
          ansible.builtin.set_fact:
            ssh_audit: "{{ ssh_audit_json.stdout | from_json }}"

        - name: Debug the SSH audit results
          ansible.builtin.debug:
            var: ssh_audit
            verbosity: 2

        - name: Set a fact for the version of OpenSSH installed
          ansible.builtin.set_fact:
            ssh_version: "{{ ssh_audit.banner.software | regex_replace('^OpenSSH_') | regex_replace('p1$') }}"

        - name: Print the server fingerprints as JSON
          ansible.builtin.debug:
            var: ssh_audit.fingerprints
          when: not ssh_first_check | bool

      when: ssh_which_ssh_audit.rc == 0
      tags:
        - ssh_audit

  tags:
    - ssh
...
