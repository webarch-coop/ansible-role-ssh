# {{ ansible_managed }}

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/local/bin:/usr/bin:/bin:/usr/games

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

# TODO Automatically uncomment the following Include if OpenSSH 8.2 or
#      greater is installed from buster-backports
#      https://packages.debian.org/buster/openssh-server
# Include /etc/ssh/sshd_config.d/*.conf

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# Supported HostKey algorithms by order of preference.
{% if ssh_host_keys is defined %}
{% for key in ssh_host_keys %}
HostKey {{ key }}
{% endfor %}
#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key
{% endif %}

# Ciphers and keying
#RekeyLimit default none

{% if ssh_kex_algorithms is defined %}
KexAlgorithms {% for k in ssh_kex_algorithms %}{{ k }}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}

{% if ssh_ciphers is defined %}
Ciphers {% for c in ssh_ciphers %}{{ c }}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}

{% if ssh_macs is defined %}
MACs {% if ssh_mac_list_strategy is defined %}{% if ssh_mac_list_strategy == "append" %}+{% elif ssh_mac_list_strategy == "head" %}^{% elif ssh_mac_list_strategy == "remove" %}-{% endif %}{% endif %}{% for m in ssh_macs %}{{ m }}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}

# Logging
#SyslogFacility AUTH
#LogLevel INFO
LogLevel VERBOSE

# Authentication:

#LoginGraceTime 2m
PermitRootLogin {% if not ssh_permit_root_login | bool %}no{% elif ssh_permit_root_login | bool %}yes{% else %}{{ ssh_permit_root_login }}{% endif %}

{% if ssh_deny_users is defined and ssh_deny_users != [] %}
DenyUsers{% for u in ssh_deny_users %} {{ u }}{% endfor %}
{% endif %}

{% if ssh_allow_groups is defined and ssh_allow_groups != [] %}
AllowGroups{% for g in ssh_allow_groups %} {{ g }}{% endfor %}
{% endif %}

#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

AuthenticationMethods {{ ssh_authentication_methods }}

PasswordAuthentication {% if ssh_password_authentication %}yes{% else %}no{% endif %}

PubkeyAuthentication {% if ssh_pubkey_authentication | bool %}yes{% else %}no{% endif %}

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
#AuthorizedKeysFile     .ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
#PasswordAuthentication yes
#PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the KbdInteractiveAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via KbdInteractiveAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and KbdInteractiveAuthentication to 'no'.
UsePAM yes

{% if ssh_allow_agent_forwarding is defined %}
AllowAgentForwarding {% if ssh_allow_agent_forwarding | bool %}yes{% else %}no{% endif %}
{% else %}
#AllowAgentForwarding yes
{% endif %}

{% if ssh_allow_tcp_forwarding is defined %}
AllowTcpForwarding {% if ssh_allow_tcp_forwarding | bool %}yes{% else %}no{% endif %}
{% else %}
#AllowTcpForwarding yes
{% endif %}

#GatewayPorts no

{% if ssh_x11_forwarding is defined %}
X11Forwarding {% if ssh_x11_forwarding | bool %}yes{% else %}no{% endif %}
{% else %}
#X11Forwarding yes
{% endif %}

#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no
#PrintLastLog yes
#TCPKeepAlive yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

# override default of no subsystems
# Subsystem       sftp    /usr/lib/openssh/sftp-server
Subsystem       sftp    internal-sftp

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server

{% if ssh_allow_groups is defined and ssh_allow_groups != [] %}

{% if 'chroot' in ssh_allow_groups and ssh_chroot_users_dir is defined %}
Match group chroot
    AllowGroups chroot
    DenyGroups sudo root sftponly sshonly xenshell
    ChrootDirectory {{ ssh_chroot_users_dir }}/%u
    X11Forwarding no
    AllowTcpForwarding no
    AuthenticationMethods publickey password
    PasswordAuthentication yes
    PubkeyAuthentication yes
    PermitUserRC no
    PermitTTY yes
    PermitRootLogin No
{% endif %}

{% if 'sftponly' in ssh_allow_groups %}
Match group sftponly
    AllowGroups sftponly
    DenyGroups chroot sshonly sudo root xenshell
    ChrootDirectory %h
    X11Forwarding no
    AllowTcpForwarding no
    AuthenticationMethods publickey password
    PasswordAuthentication yes
    PubkeyAuthentication yes
    PermitUserRC no
    PermitRootLogin No
    PermitTTY yes
    ForceCommand internal-sftp
{% endif %}

{% if 'sshonly' in ssh_allow_groups %}
Match group sshonly
    AllowGroups sshonly
    DenyGroups chroot sftponly sudo root xenshell
    ChrootDirectory /sshonly/%u
    X11Forwarding no
    AllowTcpForwarding no
    AuthenticationMethods publickey
    PasswordAuthentication no
    PubkeyAuthentication yes
    PermitUserRC no
    PermitTTY yes
    PermitRootLogin No
{% endif %}

{% if 'xenshell' in ssh_allow_groups %}
Match group xenshell
    AllowGroups xenshell
    DenyGroups chroot sftponly sshonly sudo root
    X11Forwarding no
    AllowTcpForwarding no
    AuthenticationMethods publickey
    PasswordAuthentication no
    PubkeyAuthentication yes
    PermitUserRC no
    PermitTTY yes
    PermitRootLogin No
{% endif %}

{% endif %}

{% if ssh_gitlab is defined and ssh_gitlab | bool %}
# https://docs.gitlab.com/ee/administration/operations/fast_ssh_key_lookup.html
Match User git    # Apply the AuthorizedKeysCommands to the git user only
  AuthorizedKeysCommand /opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell-authorized-keys-check git %u %k
  AuthorizedKeysCommandUser git
Match all    # End match, settings apply to all users again
{% endif %}

# vim: ft=sshdconfig
